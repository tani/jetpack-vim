*jetpack.txt*   The lighting-fast plugin manager

Version: 0.0.0
Author: TANIGUCHI Masaya <taniguchi@masaya.info>
License: MIT

================================================================================
Introduction ( *jetpack-introduction* )

The **lightning-fast** minimalist plugin manager for Vim/ Neovim. vim-jetpack is
a jetpack for the most of vimmers. Unbelievably, it is faster than vimrc uses
the built-in plugin manager only.

- Lightning-fast startup
    - It optimizes the search algorithm for the runtimepath
- Single file plugin
    - You need to just put the single file to use this software
- Multiple DSLs (Domain Specific Languages)
    - You can use a favorite notations, which are similar to vim-plug,
      dein.vim, packer.nvim, and paq.nvim
- Fancy UI (User Interface)
    - You can see a progress of installation with a graphical interface
- `pack/*/start`-free architecture.
    - Installed plugins do not pollutes your vim until calling `jetpack#`-functions

================================================================================
Functions ( *jetpack-functions* )

jetpack#add({repo} [, {options}])                                *jetpack#add()*
    {repo} is a pair of string concatenated with `/` such as `tani/vim-jetpack`.
    {options} is a dictionary consits of the following.

    vim-plug interface
    |   name   |        type        | description                           |
    | -------- | ------------------ | ------------------------------------- |
    |  branch  |       string       | Branch of the repository to use       |
    |   tag    |       string       | Tag of the repository to use          |
    |  commit  |       string       | Commit of the repository to use       |
    |    rtp   |       string       | Subdirectory that contains Vim plugin |
    |    dir   |       string       | Custom directory for the plugin       |
    |    as    |       string       | Use different name for plugin         |
    |    do    |  string  or  func  | Post-updat hook                       |
    |  frozen  |      boolean       | Do not update                         |
    |    on    |  string  or  list  | On-demand loading: Commands,  <Plug>  |
    |    for   |  string  or  list  | On-demand loading: File types         |

    Vim 8/ Neovim |packages| interface
    |   name   |        type        | description                           |
    | -------- | ------------------ | ------------------------------------- |
    |    opt   |      boolean       | On-demand loading: packadd {name}     |

jetpack#begin([{path}])                                        *jetpack#begin()*
    The function setups jetpack plugins. All plugin declarations should be
    placed after this function. You can give {path} if you want to use another
    directory to manage plugins.

jetpack#end()                                                    *jetpack#end()*
    The function loads declared plugins. All plugin declarations should be
    placed before this function.

jetpack#sync()                                                  *jetpack#sync()*
    The function performs to install, update, and bundle all plugins.
    The function is evenrything all you need to know.
    You must run this function after a change of your configuration.

jetpack#tap({name})                                              *jetpack#tap()*
    It returns |TRUE| if the plugin is available, otherwise it returns |FALSE|.

jetpack#get({name})                                              *jetpack#get()*
    It returns metadata of the plugin if possible, otherwise it returns `{}` .
    This is the same as `dein#get` of `dein.vim`.

jetpack#names()                                                *jetpack#names()*
    It returns the list of plugin names registered including unavailable
    plugins. Please use it with |jetpack#tap()|.

Jetpack expoted some other functions but they are only for the developers.
Unlisted functions might be changed without any announcements in the future.

================================================================================
Commands ( *jetpack-commands* )

Jetpack {repo} [, {options}]                                           *Jetpack*
    A command version of |jetpack#add()|.
    It is useful for the vim-plug sytle declaration of plugins in vimrc.

JetpackSync                                                        *JetpackSync*
    A command version of |jetpack#sync()|.
    The above command |Jetpack| is only available between |jetpack#begin()|
    and |jetpack#end()|. Thus, you can use the shorthand `J` to call this
    command.

================================================================================
Variables ( *jetpack-variables* )

g:jetpack#optimization                                  *g:jetpack#optimization*
    The optimization level for the bundle algorithm.

    |  speed  |    0    |   1    |    2    |
    | :-----: | :-----: | :----: | :-----: |
    | install | fastest |  slow  | faster  |
    | startup |  slow   | faster | fastest |

    - `0` Bundle nothing. This is the same as vim-plug and is the safest level.
    - `1` Bundle if there are no conflicts. It tries to bundle plgins as
      possible. This is default and is safer than `3`.
    - `2` Bundle everything. This may be the same as dein.vim, and is the
      fastest level. It overwrites some duplicated files.

g:jetpack#ignore_patterns                            *g:jetpack#ignore_patterns*
    The list of glob-patterns is used to skip duplicated files.
    Jetpack aggressively bundles plugins if you extend this list.
    The following example skip bunding any JSON files.
    >
    > call add(g:jetpack#ignore_patterns, '/*.json')

================================================================================
Events ( *jetpack-events* )

User Jetpack{PluginName}                                    *User-Jetpack-event*
    Let {PluginName} be a CamelCase of plugin name.
        vim-jetpack --> VimJetpack
        goyo.vim --> GoyoVim
        vim_foo -> VimFoo
    Code to execute when the plugin is lazily loaded on demand with
    `User Jetpack{PluginName}` .
    It is impossible to hook `packadd` for a lua plugin in Neovim,
    because Neovim does not load any files until the module is required.
    Instead, consider |User-Jetpack-event-lua|.

User JetpackPre{PluginName}
    Same as |User-Jetpack-event|.
    Code to execute before the plugin is lazily loaded on demand with
    `User JetpackPre{PluginName}` .

User Jetpack{ModuleName}                                *User-Jetpack-event-lua*
    Let {ModuleName} be a CamelCase of module name.
        vim-jetpack --> VimJetpack
        goyo.vim --> GoyoVim
        vim_foo -> VimFoo
    Code to execute when the plugin is required as a lua module with
    `User Jetpack{ModuleName}` .

================================================================================
Groups ( *jetpack-groups* )

Jetpack                                                         *Jetpack-group*
    Jetpack's on-demand loading uses autocommands defined under the `Jetpack`
    |autocmd-groups| .

================================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
